Q: Which language is used in Angular ?
A: Typescript is used to write code in Angular.
  
Q: Which files are generated when you compile the Typescript file?
A:  Javascript files are generated.

Q: How do you use typescript in HTML pages?
A: Typescripts are compiled and converted into JavaScript. We use generated JavaScript in our HTML.

Q: What is a component?  
A:	Components are the main building block for Angular applications .
	For one UI screen we create one component . 
	Component contains View HTML, Controller .TS  file,  .CSS file and Unit test case.
	
	Each component consists of :
	An HTML template that declares what renders on the page
	A TypeScript class that defines behavior
	A CSS selector that defines how the component is used in a template
	Optionally, CSS styles applied to the template.

	@Component({
	  selector: 'app-component-overview', "<"
 	 templateUrl: './component-overview.component.html',
 	 styleUrls: ['./component-overview.component.css']
	})

Q: What is contained by .ts file in the component? OR what is done by .ts file? 
A: 
It plays the role of the controller.  
It contains data and action methods.  
Data is bound with HTML form elements. Action methods are bound with form events.
Action methods are called on form events.  Action methods perform business operations with help of service classes
 and navigate control to the next page.

For example LoginComponent contains form.loginId and form.password data that is bound with HTML form and
 signin() action method that performs authentication.

Q: What is contained by the .html file in the component? Or what is done by .html file.

A: It contains HTML view and HTML forms to get input from User. HTML contains view logics

Q: What is a Service?
A: Service is a reusable class, it contains business logics and data. Service generally has REST endpoints and make asynchronous (AJAX) calls to web services.

Q: What is a decorator 
A: Decorators are annotations. Decorator @NgModule, @Component, @Injectable are used to make modules, components, 
	and services respectively. 
 Other decorators are @Pipe etc.
 
Q: What is annotation.
A:An annotation is extra information associated with a particular point in a document or other piece of information.

Q: Which architecture is used by Angular 8?
A: Angular uses component/ service architecture.

Q: Which architecture is followed by a Component 
A:  A component follow MVC architecture 








Project Source Code  

Q: How do you configure/generate Angular
project?
A: We generate an angular project using “ng new project-name” command at the console.

Q: What is the folder structure of your project?
A: It generates a folder with the project-name and inside this folder, it generates many subfolders like:

C:\project-name\e2e  - End to End test cases are contained by this folder 
C:\project-name\node_modules - Contains dependent NPM modules 
C:\project-name\src   - Cotains application source code

Folder \src contains our developed source code. 
 
Q: In which folder your components are generated?
A: Our components are generated in \src\app folder.

Q: Can you create your components/ services/ pipe etc. manually?
A: Yes, we can create components/ services/ pipe manually. We have to make entries of manually created 
	components in the app.module.ts configuration file.

Q: Which is the configuration file of your project?
A: An Application is a Module for Angular . Project generates app.module.ts configuration file in \src\app folder.

Components, Routers, Services, Dependent Modules are imported and configure in this file.

Q: Which is the root component of your application?
A: AppComponent is the root component of the application.
 	 Project generates app.component.ts file which contains root component class.

Q: How do you make a SPA (Single Page Application) in Angular.
A: We make SPA with help of routes and <router-outlet> tag. We define routes for generated components in router file and use
 <router-outlet> tag inside AppComponent HTML page.

Q: How do you define routes?
A: Project generates app-routing.module.ts file. In this file, we define routes for our components.

@NgModule({
  imports: [RouterModule.forRoot( [{path:'login', component: LoginComponent},
				{ path: 'welcome', component: WelcomeComponent}])],
  exports: [RouterModule]
})

export class AppRoutingModule {}

Q: How do you generate a Component?
A: We generate a component using “ng generate component Login”  or “ng g c Login”  command. 

Q: Which decorator is used to define a Component?
A: Decorator @Component is used define a component.

@Component({..})
export class AppComponent {}

`Q: How do you generate a Service?
A: We generate a service using “ng generate service User”  or “ng g s User”  command. 

Q: Which decorator is used to define a Service?
A: Decorator @Injectable is used define a service.

@Injectable()
export class MarksheetService {}

Q: How do you generate a Pipe?
A: We generate a pipe using “ng generate pipe Rs”  or “ng g p Rs”  command. 

Q: Which decorator is used to define a Pipe?
A: Decorator @Pipe is used define a pipe.

@Pipe ({ name : 'rs' })
export class RsPipe implements PipeTransform {}
 
 Q:what is directive in angular 8.
A:  directives are DOM elements to interact with your application. Generally, directive is a TypeScript function.
	Definition : Directives are classes that add additional behavior to elements in your Angular applications. 
 	directives are DOM elements to interact with your application.
	Angular uses built-in directives to manage forms, lists, styles, and what users see.
				
                for eg attribute directive such as ngModel and structural directive  ngIf ngFor.

	1)Component Directive : Component can be used as directives.
	Every component has Input and Output option to pass between component and its                  parent HTML elements.
		eg: <list-item [items]="fruits"> ... </list-item>
	2) Attribute Directive: Attribute directives listen to and modify the behavior of other                   HTML elements,attributes, properties, and components.
		eg: ngModel, ngStyle, ngClass

	3) Structural Directive: Structural directives are responsible for HTML layout. 
	  They shape or reshape the DOM's structure, typically by adding, removing, and                    manipulating the host elements to which they are attached.
		 eg: *ngIf, *ngFor, ngSwitch.


Q: How do you generate a Directive?
A: We generate a directive using “ng generate directive FileUpload”  or “ng g d FileUpload”  command. 

Q: Which decorator is used to define a Directive?
A: Decorator @Directive is used define a pipe.

@Directive({})
 export class MyDirDirective {}

Q what is module?
Module in Angular refers to a place where you can group the components, directives, pipes, and services, 
which are related to the application.
To define module, we can use the NgModule. 

Q: How do you generate a Module?
A: We generate a module using “ng generate module MyModule” or “ng g m MyModule” command. 

Q: Which decorator is used to define a Module?
A: Decorator @NgModule is used to define a Module.

@NgModule({..}) 
export class AppModule {}
 
Q: How do you run your project?
A: Using “ng serve”  or “ng s” command. 


Component  
Q: What is a component? 

A: For one UI screen we create one component.
  Component contains View HTML, Controller .ts  file,  .CSS file and Unit test case.

Q: What is contain by .ts file in component? OR what is done by .ts file? 

A: 
It plays the role of controller.  
It contains data and action methods.  
Data is bound with HTML form elements. Action methods are bound with form events.
Action methods are called on form events.  
Action methods performs business operations with help of service classes and
 navigate control to the next page.

For example LoginComponent contains form.loginId and form.password data that is bound with HTML form and signin() action method that performs authentication.

Q: What is contain by .html file in component? Or what is done by .html file.

A: It contains html view and html forms to get input from User. HTML contains view logics

Q: How do you generate a Component?

A: We generate a component using “ng generate component Login”  or “ng g c Login”  command. 

Q: Which decorator is used to define a Component?

A: Decorator @Component is used define a component.

@Component({..})
export class AppComponent {}

Q: Can you create your components manually?
A: Yes, we can create components manually. 
	Component entry is made in configuration file app.module.ts inside declarations array.

Q: How do you map CSS and HTML template with component?
A: We map CSS and HTML Template using styleUrls and templateUrl attributes of decorate @Component.

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
 
Q: Which interface will you implement to create component class?
A: We will implement OnInit interface and define ngOnInit method to create a component.
   Method ngOnInit is called at the time of component instantiation.

export class LoginComponent
implements OnInit {
  ngOnInit() {
  }
}
    
Q: How do you inject a service into component?
A: We will inject services using constructer parameters of component class. 
  
constructor( private aroute: ActivatedRoute, private router: Router, privateservice:MarksheetService) { }
 
Q: Can you inject one service into multiple components?
A: Yes, we can inject one service into multiple components. Services are created to be used by multiple components.
 
Q: How do you read URI variable in a component?
A: URI variables are read by ActivatedRoute service.
	a route.snapshot.paramMap.get method is called to read url parameters.
 
constructor(private aroute:ActivatedRoute) { }
ngOnInit(){
 let id =this.aroute.snapshot.paramMap.get("id");
}
 
We are assuming that id is passed as part of URI http://localhost:4200/User/1 
HTTP  
Q: How do you make AJAX call to a HTTP Server 
A: We use HttpClient service in angular to make AJAX calls.
	eg : HttpClient.get or post

Q: How do you call RESTFul web services from angular? 
A: We use HttpClient service to call RESTful apis.

Q: Which module will you import to use HttpClient service?
A: We import HttpClientModule in app.module.ts configuration file to use HttpClient .

Q: Which methods are contain by HttpClient service?
A: HttpClient service contains get(), post(), put(),patch(), delete() methods to make http calls.

Q: What are the differences between HTTP GET and POST method  
A: GET sends data as query string whereas POST send data as request body.

Q: Which parameters will be passed to HttpClient methods.
A: Method get(url) and delete(url) receive one parameter; url (endpoint) 
Method put(url,data), post(url,data) and patch(url,data)  receive two parameters; url and data. 
Usually data is a JSON object.

Q: What is httpOptions object?
A: Object HttpOptions contains request header information, query parameters and
	other configurable values.

 All HttpClient methods receive “httpOptions” as last optional parameter. 

get(url [,httpOptions]) 
delete(url[,httpOptions]) 
put(url,data[,httpOptions])
post(url,data[,httpOptions]) 
patch(url,data[,httpOptions])

Q: What is returned by get() and post() methods?
A: Both methods returns Observable object. 

Q: How do you get response data from observable object?
A: Observable object subscribe two callback methods success(response) and fail(response). 
	Both callbacks receive response as parameter.
	Success callback is called when request is successful. 
	If request is failed then fail callback is called.

this.http.get(url).subscribe(function success(data) {
  console.log("Success", data);
},
function fail(data) {
console.log("Fail",
data.statusText);
}); 




PIPE  
Q: Why do you use Pipe?
A: Pipes are used to format the data. Pipes can be used to change data from one format to another
2:32 PM 3/8/2021
{{name | uppercase }}  // convert name to uppercase
{{name | lowercase }} // convert name to lower case
 
Q: Give me names of pipes? 
Ans DatePipe: Formats a date value according to locale rules.
	UpperCasePipe: Transforms text to all upper case.
	LowerCasePipe: Transforms text to all lower case.
	CurrencyPipe: Transforms a number to a currency string, formatted according to locale rules.
	DecimalPipe: Transforms a number into a string with a decimal point, formatted according to locale rules.
	PercentPipe: Transforms a number to a percentage string, formatted according to locale rules.

Q: Can you create a custom pipe?
A: Yes, we can generate a custom pipe using “ng g p pipe-name” command.

Q: Which decorator will you use to create Pipe?
A: We use @Pipe decorator

Classes and Object  
Q: How do you create a class?
A: We create a class using 'class' keyword.

Q: How do you define a variable in a class?
A: We define variables using ‘let’ and 'var" keyword. 

	let decimal: number = 6;
 
Q: How do you define the data type of a variable?
A:  Variable name is followed by data type.
	Variable name and data type are separated by a colon (:) character.

	Syntax: let variable-name: data-type	

	let decimal: number = 6;

Q: Which are different data types in Angular?
A: Angular has a string, decimal, boolean, array data type.

let name: string = ‘Ram’;
let flag: boolean = True;
let salary: number = 100.10;
let code: number = 99;

Q: Can you define constants in Angular?
A: Yes, with the help of a const keyword.

const PI = 3.14;
 
Q: How do you define a constructer?
A: We define constructor using constructor keyword

Q: How many constructors can you define in a class?
A: Only one constructor can be defined in a class. 

Q: How do you inherit a class?
A: We inherit class using the ‘extend’ keyword.

Q: How do you override a method?
A: Child class can override the parent class method.

 Q: How do you overload a method?
A: You can define a function with optional parameters to achieve method overriding.

function paramTest(rollNo:number,name?:string) { 
   console.log(rollNo);
   console.log(name);
} 



Installation and Configuration  
Q: How can you install Angular CLI?
A: We install angular using “npm install @angular/cli ” command 

npm install -g @angular/cli
npm install -g @angular/cli@8.1.2

Q: What is CLI?
A:  Angular CLI stands for Angular “Command Line Interface”. 
	 CLI is used to generate angular components, projects, and run the project.

Q: What is NPM?
A: It is the Node Package Manager.
   It is an online repository for open-source Node.js packages. CLI is installed using NPM.



Observable Vs Promise Object  
Q: What are the differences between Observable and Promise objects?

 Observable can handle multiple responses for a request whereas
 Promise can handle only single response for a request.

 HTTP Request initiated by Observable object can be canceled whereas 
 HTTP request initiated by Promise cannot be canceled.

Q: How do you get Promise object in Angular 8?
A:  We can get a Promise object using toPromise() method

constructor(private http: HttpClient) { }
 private search(term) {
    this.http.get(url).toPromise().then((data) => { .. });
 }


Q: How do you use a promise object?
A: Sorry, I never get a chance to use it
. If I have to do it I can do it. 



Component interaction 
Component interaction can be done using @input decorator.

Data from one component (called parent component) can be passed to another component (child component).

Child components must define receiving parameters using @input decorator 

Here Data Component is receiving two input elements thus child component 

@Component({
  selector: 'app-data',
  template: '<li>Name is {{name}} and age  is {{age}}</li>'
})
export class DataComponent implements OnInit {
  @Input() name: string;
  @Input() age: number;
}


Another component can use it using selector name and passing two parameters using following syntax:

<app-data [name]= “Ram”  [age]=”16”></app-data>


Here is another component Two that using Data component

import { Component, OnInit } from '@angular/core';
@Component({
  selector: 'app-two',
  template: `
  <h2> Total person {{list.length}} </h2>
  <app-data *ngFor="let p of list"  [name]= p.name  [age]=p.age></app-data>
  `
})
export class TwoComponent implements OnInit {
  list = [
    {"name": "jay", "age":16},
    {"name": "Ajay", "age":18},
    {"name": "Vijay", "age":20},
  ];
}



Login – User Story / Use case  
Q: How do you create Login functionality in your application 
A: For Login screen we will generate Login component.
  We will use command “ng g c Login” to generate Component.

 Q: Which files are generated for Login component?
A: It generates login-component.ts type-script file which contains control logics.
It generates login-component.html html file which contains view logics.
It generates login-component.css file 
It generates login.component.spec.ts file for unit test.
Component is automatically configured in application configuration file app.module.ts.

Q: Can you write Login component manually?
A: Yes, we can create Login component manually. 
Login typescript and Login HTML page are created
Login route is defined in app-routing.module.ts file.
Component configuration is done in application configuration file app.module.ts file.

Q: What code will you write in Login typescript?
A: Type script will define LoginComponent class which implements OnInit interface.
We will define two attributes userId and password. These attributes will be bound with Login HTML form.
We will define signin() method which will do authentication of user with help of UserService.

export class LoginComponent
implements OnInit {
  public userId:string = 'Enter User ID';
  public password:string = '';
  public message:string  = 'No message';
   constructor(router: Router, service:UserService) { }
   ngOnInit() {}
`   signIn(){
    if(this.service.login(this.userId,this.password)){
      this.router.navigateByUrl('/welcome');
    }else{
      this.message = 'Invalid login id or password'; 
    }
  }

Q: What code will you write in Login HTML form?

A: We will create html Form and bind form input elements with userId and password typescript variables.  

We will bind on-click event of Sign-In button with method signin() method.

<p style="color:red" >{{message}}</p>
<form >
  User ID: <input  [(ngModel)]="userId"  name="userId" type="text">  
  Password:   <input  [(ngModel)]="password"  name="password" type="password">
  <button (click)="signIn()">Sign In</button>
</form>
 

Q: On successful login how will you navigate to Welcome page?
A: We will navigate using router.navigateByUrl('/welcome') method.

Q:  How do you do two-way data binding of userId and password variables?
A: We do two-way data binding using ng-model directive and square bracket and parenthesis.

  User ID: <input [(ngModel)]="userId" > 
 

Q: On unsuccessful login how do you display error message?
A: We set error message to controller attribute “message” and display it at html page using {{message}}.






Copyright © Rays Technologi