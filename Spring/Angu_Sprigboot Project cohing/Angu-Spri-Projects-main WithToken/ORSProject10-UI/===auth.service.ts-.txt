===auth.service.ts->

import { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { HttpServiceService } from './http-service.service';

@Injectable({
  providedIn: 'root'
})
export class AuthService implements HttpInterceptor {

  constructor(private router: Router) { }

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {

    if (localStorage.getItem('fname') && localStorage.getItem('token')) {
      req = req.clone({
        setHeaders: {
          "withCredentials": "true",
          "name": "Sawan",
          Authorization: localStorage.getItem('token')
        }
      })
    }
    console.log(req.headers.get("Authorization") + "------------------->>>")
    return next.handle(req).pipe(
      catchError((error: HttpErrorResponse) => {
        if (error.status === 401) {
          localStorage.clear();
          this.router.navigate(['/login'], {
            queryParams: { errorMessage: error.error },
          });
        }

        if (error.status === 403) {
          localStorage.clear();
          this.router.navigate(['/login'], {
            queryParams: { errorMessage: 'Token is expired... plz login again..!!' },
          });
        }
        return throwError(error);
      })
    );
  }
}




====http-service.service.ts->

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ActivatedRoute } from '@angular/router';

@Injectable({
  providedIn: 'root'
})
export class HttpServiceService {

  constructor(private httpClient: HttpClient) { }

  get(endpoint, callback) {
    return this.httpClient.get(endpoint).subscribe((data) => {
      console.log('get data => ', data);
      callback(data);
    });
  }

  post(endpoint, bean, callback) {
    return this.httpClient.post(endpoint, bean).subscribe((data) => {
      console.log('post data => ', data);
      callback(data);
    });
  }

  getPathVariable(route: ActivatedRoute, callback) {
    route.params.subscribe(params => {
      callback(params)
    });
  }
}



=====app.module.ts-->

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { AppComponent } from './app.component';
import { AppRoutingModule } from './app-routing.module';
import { LoginComponent } from './login/login.component';
import { FooterComponent } from './footer/footer.component';
import { NavbarComponent } from './navbar/navbar.component';
import { DashboardComponent } from './dashboard/dashboard.component';
import { SignupComponent } from './login/signup.component';
import { HttpServiceService } from './http-service.service';
import { DataValidator } from './utility/data-validator';
import { UserComponent } from './user/user.component';
import { UserListComponent } from './user/user-list.component';
import { AuthService } from './auth.service';


@NgModule({
  declarations: [
    AppComponent,
    LoginComponent,
    FooterComponent,
    NavbarComponent,
    DashboardComponent,
    SignupComponent,
    UserComponent,
    UserListComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    HttpClientModule
  ],
  providers: [
    {
      provide: HTTP_INTERCEPTORS, useClass: AuthService, multi: true
    },
    HttpServiceService,
    DataValidator
  ],
  bootstrap: [AppComponent]
})


export class AppModule {

}



app-routing.ts-->


import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { DashboardComponent } from './dashboard/dashboard.component';
import { LoginComponent } from './login/login.component';
import { SignupComponent } from './login/signup.component';
import { UserListComponent } from './user/user-list.component';
import { UserComponent } from './user/user.component';

const routes: Routes = [
    {
        path: '',
        redirectTo: 'dashboard',
        pathMatch: 'full'
    },
    {
        path: 'dashboard',
        component: DashboardComponent
    },
    {
        path: 'login',
        component: LoginComponent
    },
    {
        path: 'signup',
        component: SignupComponent
    },
    {
        path: 'user',
        component: UserComponent
    },
    {
        path: 'user/:id',
        component: UserComponent
    },
    {
        path: 'userlist',
        component: UserListComponent
    }
];

@NgModule({
    imports: [RouterModule.forRoot(routes)],
    exports: [RouterModule]
})


export class AppRoutingModule { }


=====login.component.html=>
<app-navbar></app-navbar>
<style>
  .error {
    color: red;
    font-weight: bold;
  }

  .success {
    color: green;
    font-weight: bold;
  }

  input,
  select {
    width: 250px;
  }

  th,
  td {
    padding: 5px;
  }
</style>
<br><br>
<div align="center">
  <h1 style="color: navy;">Login</h1>
  <div style="height: 15px; margin-bottom: 12px" align="center" class="error" *ngIf="form.error">
    {{ form.message }}
  </div>
  <table>
    <tr>
      <th>Login ID :</th>
      <td><input type="text" name="loginId" [(ngModel)]="form.loginId" /> </td>
      <td *ngIf="inputerror.loginId != null" class="error" style="position: fixed;">
        {{inputerror.loginId}}
      </td>
    </tr>
    <tr>
      <th>Password :</th>
      <td><input type="text" name="password" [(ngModel)]="form.password" /> </td>
      <td *ngIf="inputerror.password != null" class="error" style="position: fixed;">
        {{inputerror.password}}
      </td>
    </tr>
    <tr>
      <th></th>
      <td>
        <button (click)="signIn()" style="margin-right: 5px;">signIn</button>
        <button (click)="signUp()">signUp</button>
      </td>
    </tr>
  </table>
</div>
<app-footer></app-footer>


=======login.component.ts==>


import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { format } from 'url';
import { HttpServiceService } from '../http-service.service';
import { DataValidator } from '../utility/data-validator';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent implements OnInit {

  form = {
    error: false,
    loginId: '',
    password: '',
    message: ''
  };
  inputerror = {};
  message = '';


  constructor(private route: ActivatedRoute, private router: Router, private httpService: HttpServiceService, private dataValidator: DataValidator) { }

  ngOnInit() {
    this.route.queryParams.subscribe((params) => {
      this.form.error = true;
      this.form.message = params['errorMessage'] || null;
      console.log('msssssssssgggggggggggg = >', this.form.message)
    });
  }

  signIn() {
    var self = this;
    this.httpService.post('http://localhost:8080/Auth/login', this.form, function (res) {

      self.form.message = '';
      self.inputerror = {};
      self.form.error = !res.success;

      if (self.dataValidator.isNotNullObject(res.result.inputerror)) {
        self.inputerror = res.result.inputerror;
      }
      if (self.dataValidator.isNotNullObject(res.result.message)) {
        self.form.message = res.result.message;
      }
      if (res.success) {
        localStorage.setItem("fname", res.result.data.firstName);
        localStorage.setItem("role", res.result.data.roleName);
        localStorage.setItem("token", 'Bearer ' + res.result.token);
        self.router.navigateByUrl('/dashboard');
      }
    })
  }

  signUp() {
    this.router.navigateByUrl('/signup');
  }

}






====signup.component.ts=>

import { Component, OnInit } from '@angular/core';
import { HttpServiceService } from '../http-service.service';
import { DataValidator } from '../utility/data-validator';

@Component({
  selector: 'app-signup',
  templateUrl: './signup.component.html'
})
export class SignupComponent implements OnInit {

  public form = {
    data: { id: null },
    message: ''
  };

  inputerror = {};

  constructor(private httpService: HttpServiceService, private dataValidator: DataValidator) { }

  ngOnInit() {
  }

  signUp() {

    var self = this;

    this.httpService.post('http://localhost:8080/Auth/signUp', this.form.data, function (res) {

      self.form.message = '';
      self.inputerror = {};

      if (self.dataValidator.isNotNullObject(res.result.inputerror)) {
        self.inputerror = res.result.inputerror;
      }
      if (self.dataValidator.isNotNullObject(res.result.message)) {
        self.form.message = res.result.message;
      }
    });
  }
}




====signup.component.html===>
<app-navbar></app-navbar>
<style>
  .error {
    color: red;
    font-weight: bold;
  }

  .success {
    color: green;
    font-weight: bold;
  }

  input,
  select {
    width: 250px;
  }

  th,
  td {
    padding: 5px;
  }
</style>
<div align="center">
  <h2 style="color: navy">User Registration</h2>
  <div style="height: 15px; margin-bottom: 12px" align="center" class="success" *ngIf="form.message">
    {{ form.message }}
  </div>
  <table>
    <tr>
      <th>first Name :</th>
      <td><input type="text" name="firstName" [(ngModel)]="form.data.firstName" /> </td>
      <td *ngIf="inputerror.firstName != null" class="error" style="position: fixed;">
        {{inputerror.firstName}}
      </td>
    </tr>
    <tr>
      <th>Last Name :</th>
      <td><input type="text" name="lastName" [(ngModel)]="form.data.lastName" /> </td>
      <td *ngIf="inputerror.lastName != null" class="error" style="position: fixed;">
        {{inputerror.lastName}}
      </td>
    </tr>
    <tr>
      <th>Login ID :</th>
      <td><input type="text" name="loginId" [(ngModel)]="form.data.loginId" /> </td>
      <td *ngIf="inputerror.loginId != null" class="error" style="position: fixed;">
        {{inputerror.loginId}}
      </td>
    </tr>
    <tr>
      <th>Password :</th>
      <td><input type="text" name="password" [(ngModel)]="form.data.password" /> </td>
      <td *ngIf="inputerror.password != null" class="error" style="position: fixed;">
        {{inputerror.password}}
      </td>
    </tr>
    <tr>
      <th>DOB :</th>
      <td><input type="date" name="dob" [(ngModel)]="form.data.dob" /> </td>
    </tr>
    <tr>
      <th></th>
      <td><button (click)="signUp()">signUp</button></td>
    </tr>
  </table>
</div>
<app-footer></app-footer>



=====navbar.component.html==>
<style>
  .dark-hr {
    border-color: darkgray;
  }
</style>
<table width="100%" border="0">
  <tr>
    <td width="90%">
      <a href="/dashboard"><b>Dashboard</b></a> |
      <ng-container *ngIf="isLogin(); else el">
        <a (click)="logout()">
          <font color="blue"><b>Logout</b></font>
        </a>
      </ng-container>
      <ng-template #el>
        <a href="/login"><b>Login</b></a>
      </ng-template>
    </td>
    <td rowspan="2">
      <a href="/dashboard">
        <img src="assets\files\logo.png" height="25px" width="120px" alt="Logo">
      </a>
    </td>
  </tr>
  <tr>
    <td>
      <ng-container *ngIf="isLogin(); else elseBlock">
        <a href="/login">
          <font color="black"><b>Hi, {{form.data.fname }} ({{form.data.role}})</b></font>
        </a> |
        <a href="/user"><b>Add User</b></a> |
        <a href="/userlist"><b>User List</b></a>
      </ng-container>
      <ng-template #elseBlock>
        <b>Hi, Guest</b><br>
      </ng-template>
    </td>
  </tr>
</table>
<hr class="dark-hr">



====navbar.component.ts===>

import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';

@Component({
  selector: 'app-navbar',
  templateUrl: './navbar.component.html',
  styleUrls: ['./navbar.component.css']
})
export class NavbarComponent implements OnInit {

  public form = {
    data: { id: null, fname: null, role: null }
  };

  constructor(private router: Router) { }

  ngOnInit() {
  }

  isLogin() {
    let check = localStorage.getItem('fname');
    if (check != "null" && check != null) {
      this.form.data.fname = localStorage.getItem("fname");
      this.form.data.role = localStorage.getItem("role");
      return true;
    } else {
      return false;
    }
  }

  logout() {
    localStorage.clear();
    this.router.navigateByUrl('/login')
  }

}



====user-list.component.html==>

<app-navbar></app-navbar>
<div align="center" style="padding-top: 1%; padding-bottom:4%;">
  <h1 align="center" style="margin-bottom: -15; color: navy;">User
    List</h1>
  <table style="width: 30%">
    <tr>
      <td><input type="text" name="firstName" [(ngModel)]="form.searchParams.firstName"
          placeholder="Enter First Name Here" style="margin-right: 5px;" /></td>
      <td><input type="date" name="dob" [(ngModel)]="form.searchParams.dob" placeholder="Enter Date Of Birth Here"
          style="margin-right: 5px;" /></td>
      <td> <select name="roleId" [(ngModel)]="form.searchParams.roleId">
          <option [ngValue]="" value="undefined">{{'------Select Role-------' }}</option>
          <option *ngFor="let obj of form.preload.roleList" [value]="obj.key">{{obj.value}}</option>
        </select></td>
      <td>
        <button (click)="search()">search</button>
      </td>
    </tr>
  </table>
  <br>
  <table border="1" style="width: 100%; border: groove;">
    <tr style="background-color: #e1e6f1e3;">
      <th width="5%" style="text-align: center;">Select</th>
      <th width="5%" style="text-align: center;">S.No.</th>
      <th width="5%" style="text-align: center;">Image</th>
      <th width="13%" style="text-align: center;">FirstName</th>
      <th width="13%" style="text-align: center;">LastName</th>
      <th width="13%" style="text-align: center;">LoginId</th>
      <th width="8%" style="text-align: center;">Password</th>
      <th width="8%" style="text-align: center;">Role</th>
      <th width="13%" style="text-align: center;">DOB</th>
      <th width="5%" style="text-align: center;">Edit</th>
    </tr>
    <tr *ngFor="let m of form.list; let i = index">
      <td style="text-align: center;">
        <input type="checkbox" #checkboxes name="list_name" id="{{m.id}}" value="{{isMasterSel}}" />
      </td>
      <td style="text-align: center;">{{(form.pageNo*5)+i+ 1}}</td>
      <td>
        <div *ngIf="m.imageId">
          <img src="http://localhost:8080/User/profilePic/{{m.id}}" height="55px" width="80px">
        </div>
        <div *ngIf="!m.imageId">
          <img src="../../assets/files/default.jpg" height="55px" width="80px">
        </div>
      </td>
      <td style="text-align: center;">
        {{m.firstName}}
      </td>
      <td style="text-align: center;">
        {{m.lastName}}
      </td>
      <td style="text-align: center;">
        {{m.loginId}}
      </td>
      <td style="text-align: center;">
        {{m.password}}
      </td>
      <td style="text-align: center;">
        {{m.roleName}}
      </td>
      <td style="text-align: center;">
        {{m.dob | date : 'dd-MM-yyyy'}}
      </td>
      <td style="text-align: center;"> <a (click)="edit( '/user/' +  m.id)" style="color: blue;">edit
        </a></td>
    </tr>
  </table>
  <table style="width: 100%">
    <tr>
      <td style="width: 25%"><button [disabled]="form.pageNo == 0" (click)="previous()">previous</button></td>
      <td align="center" style="width: 25%"><button (click)="add()">add</button></td>
      <td align="center" style="width: 25%"><button (click)="delete()">delete</button></td>
      <td style="width: 25%" align="right"><button [disabled]="form.list.length < 5" (click)="next()">next</button></td>
    </tr>
  </table>
</div>
<app-footer></app-footer>



=====user-list.component.ts===>
import { Component, ElementRef, OnInit, QueryList, ViewChildren } from '@angular/core';
import { Router } from '@angular/router';
import { HttpServiceService } from '../http-service.service';
import { DataValidator } from '../utility/data-validator';

@Component({
  selector: 'app-user-list',
  templateUrl: './user-list.component.html'
})
export class UserListComponent implements OnInit {

  @ViewChildren("checkboxes") checkboxes: QueryList<ElementRef>;
  deleteRecordList: any = [];
  isMasterSel: boolean = false;

  form = {
    pageNo: 0,
    data: { id: null },
    searchParams: {},
    list: [],
    preload: []
  }

  constructor(private httpService: HttpServiceService, private router: Router) { }

  ngOnInit() {
    this.preload();
    this.search();
  }

  preload() {
    var self = this;
    this.httpService.get('http://localhost:8080/User/preload', function (res) {
      self.form.preload = res.result;
    });
  }

  search() {
    var self = this;
    this.httpService.post('http://localhost:8080/User/search/' + self.form.pageNo, self.form.searchParams, function (res) {
      self.form.list = res.result.data;
    });
  }

  next() {
    this.form.pageNo++;
    this.search();
  }

  previous() {
    this.form.pageNo--;
    this.search();
  }

  add() {
    this.router.navigateByUrl('/user');
  }

  delete() {
    var self = this;
    this.deleteRecordList.length = 0;
    this.checkboxes.forEach((element) => {
      if (element.nativeElement.checked) {
        this.deleteRecordList.push(element.nativeElement.id);
      }
    });
    this.httpService.post('http://localhost:8080/User/deleteMany/' + this.deleteRecordList + '?pageNo=' + self.form.pageNo, self.form.searchParams, function (res) {
      self.form.list = res.result.data;
    });
  }

  edit(page) {
    this.router.navigateByUrl(page);
  }
}



====user.component.ts==>

import { HttpClient } from '@angular/common/http';
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { HttpServiceService } from '../http-service.service';
import { DataValidator } from '../utility/data-validator';

@Component({
  selector: 'app-user',
  templateUrl: './user.component.html',
  styleUrls: ['./user.component.css']
})
export class UserComponent implements OnInit {

  public form = {
    data: { id: null },
    message: '',
    preload: []
  };
  fileToUpload: File = null;
  inputerror = {};

  constructor(private httpClient: HttpClient, private httpService: HttpServiceService, private dataValidator: DataValidator, public route: ActivatedRoute) {
    var self = this;
    httpService.getPathVariable(route, function (params) {
      self.form.data.id = params["id"];
    })
  }

  ngOnInit() {
    this.preload();
    if (this.form.data.id && this.form.data.id > 0) {
      this.display();
    }
  }

  display() {
    var self = this;
    this.httpService.get('http://localhost:8080/User/get/' + self.form.data.id, function (res) {
      self.form.data = res.result.data;
    });
  }

  preload() {
    var self = this;
    this.httpService.get('http://localhost:8080/User/preload', function (res) {
      self.form.preload = res.result;
    });
  }

  onFileSelect(files: FileList) {
    this.fileToUpload = files.item(0);
    console.log(this.fileToUpload);
  }

  myFile() {
    var self = this;
    const formData = new FormData();
    formData.append('file', this.fileToUpload);
    return this.httpClient.post("http://localhost:8080/User/profilePic/" + this.form.data.id, formData).subscribe(data => {
      console.log(this.fileToUpload);
    }, error => {
      console.log(error);
    });;
  }

  submit() {

    var self = this;

    this.httpService.post('http://localhost:8080/User/save', this.form.data, function (res) {
      self.form.message = '';
      self.inputerror = {};
      if (self.dataValidator.isNotNullObject(res.result.inputerror)) {
        self.inputerror = res.result.inputerror;
      }
      self.form.data.id = res.result.data;
      self.myFile();
      if (self.dataValidator.isNotNullObject(res.result.message)) {
        self.form.message = res.result.message;
      }
    });
  }
}




====user.component.html====>

<app-navbar></app-navbar>
<style>
  .error {
    color: red;
    font-weight: bold;
  }

  .success {
    color: green;
    font-weight: bold;
  }

  input,
  select {
    width: 250px;
  }

  th,
  td {
    padding: 5px;
  }
</style>
<div align="center" style="padding-top: 1%; padding-bottom:4%;">
  <h2 style="color: navy">Add User</h2>
  <div style="height: 15px; margin-bottom: 12px" align="center" class="success" *ngIf="form.message">
    {{ form.message }}
  </div>
  <table>
    <tr>
      <th>Role Name : </th>
      <td> <select name="roleId" [(ngModel)]="form.data.roleId">
          <option [ngValue]="" value="undefined">{{'------Select Role-------' }}</option>
          <option *ngFor="let obj of form.preload.roleList" [value]="obj.key">{{obj.value}}</option>
        </select></td>
    </tr>
    <tr>
      <th>First Name : </th>
      <td><input type="text" name="firstName" [(ngModel)]="form.data.firstName" /> </td>
      <td *ngIf="inputerror.firstName != null" class="error" style="position: fixed;">
        {{inputerror.firstName}}
      </td>
    </tr>
    <tr>
      <th>Last Name : </th>
      <td><input type="text" name="lastName" [(ngModel)]="form.data.lastName" /> </td>
      <td *ngIf="inputerror.lastName != null" class="error" style="position: fixed;">
        {{inputerror.lastName}}
      </td>
    </tr>
    <tr>
      <th>Login ID : </th>
      <td><input type="text" name="loginId" [(ngModel)]="form.data.loginId" /> </td>
      <td *ngIf="inputerror.loginId != null" class="error" style="position: fixed;">
        {{inputerror.loginId}}
      </td>
    </tr>
    <tr>
      <th>Password : </th>
      <td><input type="text" name="password" [(ngModel)]="form.data.password" /> </td>
      <td *ngIf="inputerror.password != null" class="error" style="position: fixed;">
        {{inputerror.password}}
      </td>
    </tr>
    <tr>
      <th>DOB : </th>
      <td><input type="date" name="dob | date : 'yyyy-MM-dd'" [(ngModel)]="form.data.dob" /> </td>
    </tr>
    <tr>
      <th>Profile : </th>
      <td>
        <div *ngIf="form.data.id">
          <img src="http://localhost:8080/User/profilePic/{{form.data.id}}" height="55px" width="80px">
        </div>
        <div *ngIf="!form.data.id">
          <img src="../../assets/files/default.jpg" height="55px" width="80px">
        </div>
      </td>
    </tr>
    <tr>
      <th>Image : </th>
      <td><input type="file" id="customFile" name="imageId" (change)="onFileSelect($event.target.files)"
          accept="image/*"> </td>
    </tr>
    <tr>
      <th></th>
      <td><button (click)="submit()">save</button></td>
    </tr>
  </table>
</div>
<app-footer></app-footer>

